import { NextRequest, NextResponse } from 'next/server'
import { Resend } from 'resend'

const resend = new Resend(process.env.RESEND_API_KEY)

export const runtime = 'nodejs'
export const maxDuration = 30

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { content, threadId, messageId, to, subject } = body

    if (!content || !to) {
      return NextResponse.json(
        { error: 'Content and email address are required' },
        { status: 400 }
      )
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(to)) {
      return NextResponse.json(
        { error: 'Invalid email address' },
        { status: 400 }
      )
    }

    // Check if Resend is configured
    if (!process.env.RESEND_API_KEY) {
      return NextResponse.json(
        { error: 'Email service not configured' },
        { status: 503 }
      )
    }

    // Format email content
    let emailBody = ''
    let emailSubject = subject || 'Your Wyng Analysis Report'

    if (typeof content === 'string') {
      emailBody = content
    } else if (content.answer) {
      // Chat response format
      emailBody = `Here's your response from Wyng:\n\n${content.answer}\n\n`

      if (content.nextSteps && content.nextSteps.length > 0) {
        emailBody += 'Next Steps:\n'
        content.nextSteps.forEach((step: string, index: number) => {
          emailBody += `${index + 1}. ${step}\n`
        })
        emailBody += '\n'
      }

      if (content.citations && content.citations.length > 0) {
        emailBody += 'Sources:\n'
        content.citations.forEach((citation: any) => {
          emailBody += `‚Ä¢ ${citation.authority} - ${citation.title}\n`
          if (citation.excerpt) {
            emailBody += `  "${citation.excerpt}"\n`
          }
        })
        emailBody += '\n'
      }

      if (content.actionableLinks && content.actionableLinks.length > 0) {
        emailBody += 'Helpful Resources:\n'
        content.actionableLinks.forEach((link: any) => {
          emailBody += `‚Ä¢ ${link.text}\n`
          emailBody += `  ${link.description}\n`
          emailBody += `  ${link.url}\n\n`
        })
      }
    } else if (content.summary) {
      // Bill analysis format
      emailSubject = 'Your Bill Analysis Report from Wyng'
      emailBody = `Your medical bill analysis is complete:\n\n`
      emailBody += `Summary: ${content.summary}\n\n`

      if (content.findings && content.findings.length > 0) {
        emailBody += 'Key Findings:\n'
        content.findings.forEach((finding: string) => {
          emailBody += `‚Ä¢ ${finding}\n`
        })
        emailBody += '\n'
      }

      if (content.recommendations && content.recommendations.length > 0) {
        emailBody += 'Recommendations:\n'
        content.recommendations.forEach((rec: string) => {
          emailBody += `‚Ä¢ ${rec}\n`
        })
        emailBody += '\n'
      }

      if (content.savings) {
        emailBody += `Potential Savings: $${content.savings}\n\n`
      }
    }

    // Add footer
    emailBody += '\n---\n'
    emailBody += 'Generated by Wyng - Your Healthcare Guardian Angel\n'
    emailBody += 'This report provides general information, not legal or medical advice.\n'
    emailBody += 'Always verify information with your insurance company and healthcare providers.\n'

    if (threadId) {
      emailBody += `\nThread ID: ${threadId}`
    }

    // Convert markdown to HTML for better email formatting
    const htmlBody = emailBody
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/^### (.*$)/gim, '<h3 style="color: #0891b2;">$1</h3>')
      .replace(/^## (.*$)/gim, '<h2 style="color: #0891b2;">$1</h2>')
      .replace(/^# (.*$)/gim, '<h1 style="color: #0891b2;">$1</h1>')
      .replace(/\n/g, '<br>')

    // Create formatted HTML email
    const htmlEmail = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>${emailSubject}</title>
          <style>
            body {
              font-family: Arial, sans-serif;
              line-height: 1.6;
              color: #333;
              max-width: 600px;
              margin: 0 auto;
              padding: 20px;
            }
            h1, h2, h3 { color: #0891b2; }
            .header {
              border-bottom: 2px solid #0891b2;
              padding-bottom: 10px;
              margin-bottom: 20px;
            }
            .footer {
              border-top: 1px solid #e5e5e5;
              padding-top: 15px;
              margin-top: 30px;
              font-size: 12px;
              color: #666;
            }
            .content { margin: 20px 0; }
            a { color: #0891b2; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>üõ°Ô∏è Wyng - Your Healthcare Guardian Angel</h1>
            <p><strong>Generated:</strong> ${new Date().toLocaleString()}</p>
            ${threadId ? `<p><strong>Thread ID:</strong> ${threadId}</p>` : ''}
          </div>

          <div class="content">
            ${htmlBody}
          </div>

          <div class="footer">
            <p>This response provides general information only. It is not a substitute for professional medical or legal advice.</p>
            <p>Visit <a href="https://getwyng.co">getwyng.co</a> for more healthcare guidance.</p>
          </div>
        </body>
      </html>
    `

    // Check if RESEND_API_KEY is configured
    if (!process.env.RESEND_API_KEY || process.env.RESEND_API_KEY.includes('placeholder')) {
      return NextResponse.json(
        { error: 'Email service not configured. Contact support for assistance.' },
        { status: 503 }
      )
    }

    // Send email using Resend
    try {
      const emailResult = await resend.emails.send({
        from: 'WyngAI <noreply@getwyng.co>',
        to: [to],
        subject: emailSubject,
        html: htmlEmail,
        text: emailBody
      })

      if (emailResult.error) {
        throw new Error(`Email send failed: ${emailResult.error.message}`)
      }

      return NextResponse.json({
        success: true,
        message: 'Email sent successfully',
        to,
        subject: emailSubject,
        messageId: emailResult.data?.id
      })

    } catch (emailError) {
      console.error('Resend email error:', emailError)

      return NextResponse.json(
        {
          error: 'Failed to send email',
          details: emailError instanceof Error ? emailError.message : 'Email service error'
        },
        { status: 500 }
      )
    }

  } catch (error) {
    console.error('Email export error:', error)

    return NextResponse.json(
      {
        error: 'Email export failed',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}

export async function GET() {
  return NextResponse.json({
    message: 'Email export endpoint',
    methods: ['POST'],
    accepts: ['application/json'],
    requires: ['content', 'to'],
    optional: ['subject'],
    sends: 'Email with conversation content'
  })
}
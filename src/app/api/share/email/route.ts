import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { content, threadId, messageId, to, subject } = body

    if (!content || !to) {
      return NextResponse.json(
        { error: 'Content and email address are required' },
        { status: 400 }
      )
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(to)) {
      return NextResponse.json(
        { error: 'Invalid email address' },
        { status: 400 }
      )
    }

    // Check if SendGrid is configured
    const sendGridApiKey = process.env.SENDGRID_API_KEY
    if (!sendGridApiKey) {
      return NextResponse.json(
        { error: 'Email service not configured' },
        { status: 503 }
      )
    }

    // Format email content
    let emailBody = ''
    let emailSubject = subject || 'Your Wyng Analysis Report'

    if (typeof content === 'string') {
      emailBody = content
    } else if (content.answer) {
      // Chat response format
      emailBody = `Here's your response from Wyng:\n\n${content.answer}\n\n`

      if (content.nextSteps && content.nextSteps.length > 0) {
        emailBody += 'Next Steps:\n'
        content.nextSteps.forEach((step: string, index: number) => {
          emailBody += `${index + 1}. ${step}\n`
        })
        emailBody += '\n'
      }

      if (content.citations && content.citations.length > 0) {
        emailBody += 'Sources:\n'
        content.citations.forEach((citation: any) => {
          emailBody += `• ${citation.authority} - ${citation.title}\n`
          if (citation.excerpt) {
            emailBody += `  "${citation.excerpt}"\n`
          }
        })
        emailBody += '\n'
      }

      if (content.actionableLinks && content.actionableLinks.length > 0) {
        emailBody += 'Helpful Resources:\n'
        content.actionableLinks.forEach((link: any) => {
          emailBody += `• ${link.text}\n`
          emailBody += `  ${link.description}\n`
          emailBody += `  ${link.url}\n\n`
        })
      }
    } else if (content.summary) {
      // Bill analysis format
      emailSubject = 'Your Bill Analysis Report from Wyng'
      emailBody = `Your medical bill analysis is complete:\n\n`
      emailBody += `Summary: ${content.summary}\n\n`

      if (content.findings && content.findings.length > 0) {
        emailBody += 'Key Findings:\n'
        content.findings.forEach((finding: string) => {
          emailBody += `• ${finding}\n`
        })
        emailBody += '\n'
      }

      if (content.recommendations && content.recommendations.length > 0) {
        emailBody += 'Recommendations:\n'
        content.recommendations.forEach((rec: string) => {
          emailBody += `• ${rec}\n`
        })
        emailBody += '\n'
      }

      if (content.savings) {
        emailBody += `Potential Savings: $${content.savings}\n\n`
      }
    }

    // Add footer
    emailBody += '\n---\n'
    emailBody += 'Generated by Wyng - Your Healthcare Guardian Angel\n'
    emailBody += 'This report provides general information, not legal or medical advice.\n'
    emailBody += 'Always verify information with your insurance company and healthcare providers.\n'

    if (threadId) {
      emailBody += `\nThread ID: ${threadId}`
    }

    // Send email using SendGrid
    try {
      const sgMail = eval('require')('@sendgrid/mail')
      sgMail.setApiKey(sendGridApiKey)

      const msg = {
        to,
        from: process.env.SENDGRID_FROM_EMAIL || 'noreply@mywyng.co',
        subject: emailSubject,
        text: emailBody,
        html: emailBody.replace(/\n/g, '<br>')
      }

      await sgMail.send(msg)

      return NextResponse.json({
        success: true,
        message: 'Email sent successfully',
        to,
        subject: emailSubject
      })

    } catch (emailError) {
      console.error('SendGrid error:', emailError)

      return NextResponse.json(
        {
          error: 'Failed to send email',
          details: emailError instanceof Error ? emailError.message : 'Email service error'
        },
        { status: 500 }
      )
    }

  } catch (error) {
    console.error('Email export error:', error)

    return NextResponse.json(
      {
        error: 'Email export failed',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}

export async function GET() {
  return NextResponse.json({
    message: 'Email export endpoint',
    methods: ['POST'],
    accepts: ['application/json'],
    requires: ['content', 'to'],
    optional: ['subject'],
    sends: 'Email with conversation content'
  })
}